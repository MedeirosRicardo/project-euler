/*The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?*/

// Project Euler Solution
function triangleNumber(n) {
  let result = 0;
  for (let i = 1; i <= n; i++) {
    result += i;
  }
  return result;
}

function divisors(n) {
  let count = 0;
  for (let i = 1; i <= Math.sqrt(n); i++) {
    if (n % i === 0) {
      count += 2;
    }
  }
  return count;
}

function result(n) {
  let i = 1;
  while (divisors(triangleNumber(i)) <= n) {
    i += 1;
  }
  return triangleNumber(i);
}

console.log(result(500));

// HackerRank Solution
function processData(input) {
  function divisors(n) {
    let count = 0;
    for (let i = 1; i <= Math.floor(Math.sqrt(n)); i++) {
      if (n % i === 0) {
        if (i ** 2 !== n) {
          count += 2;
        } else {
          count += 1;
        }
      }
    }
    return count;
  }

  function solution() {
    let arr = [];
    let arrSize = 1000;
    let divisorsNumber = 0;
    let triangleNumber = 0;
    for (let i = 0; i <= arrSize; i++) {
      while (divisorsNumber <= i) {
        triangleNumber++;
        divisorsNumber = divisors((triangleNumber * (triangleNumber + 1) / 2));
      }
      arr[i] = (triangleNumber * (triangleNumber + 1) / 2);
    }
    let values = input.split("\n");
    for (let i = 1; i < values.length; i++) {
      console.log(arr[values[i]]);
    }
  }

  solution();
}
